import numpy as np
from scipy.spatial.distance import cdist
from collections import Counter

def KNearestNeighbour(TestMeasurements, TrainMeasurements, TrainClass, K):
    """
    This function implements the KNN algorithm to classify test set based on a training set.
    
    Parameters:
    TestMeasurements: M x 4 matrix containing the feature vector of M test samples
    TrainMeasurements: N x 4 matrix containing the feature vectors of the training set
    TrainClass: N-element vector containing the species label of the N training samples
    K: Integer, the parameter K used in KNN
    
    Returns:
    A M-element vector showing classification results generated by KNN for the test samples
    """
    
    # Compute the Euclidean distances between test and training samples
    distances = cdist(TestMeasurements, TrainMeasurements, 'euclidean')
    
    # Get the indices of the K nearest neighbors for each test sample
    knn_indices = np.argsort(distances)[:, :K]
    
    # Fetch the corresponding species labels for the K nearest neighbors
    knn_labels = TrainClass[knn_indices]
    
    # Determine the most common species label for each test sample
    predicted_labels = np.array([Counter(row).most_common(1)[0][0] for row in knn_labels])
    
    return predicted_labels